use std::f32::consts::TAU;

use super::math::lerp;
use super::vec2::V2;
use crate::prelude::types::Angle;

pub const ANGLE0: Angle = 0.0000000000000000000000000000000000000000000000000000000000000000_f32;
pub const ANGLE1: Angle = 0.0174532925199432954743716805978692718781530857086181640625000000_f32;
pub const ANGLE2: Angle = 0.0349065850398865909487433611957385437563061714172363281250000000_f32;
pub const ANGLE3: Angle = 0.0523598775598298898925619937472220044583082199096679687500000000_f32;
pub const ANGLE4: Angle = 0.0698131700797731818974867223914770875126123428344726562500000000_f32;
pub const ANGLE5: Angle = 0.0872664625997164739024114510357321705669164657592773437500000000_f32;
pub const ANGLE10: Angle = 0.1745329251994329478048229020714643411338329315185546875000000000_f32;
pub const ANGLE15: Angle = 0.2617993877991494078294465452927397564053535461425781250000000000_f32;
pub const ANGLE20: Angle = 0.3490658503988658956096458041429286822676658630371093750000000000_f32;
pub const ANGLE25: Angle = 0.4363323129985823833898450629931176081299781799316406250000000000_f32;
pub const ANGLE30: Angle = 0.5235987755982988156588930905854795128107070922851562500000000000_f32;
pub const ANGLE35: Angle = 0.6108652381980153034390923494356684386730194091796875000000000000_f32;
pub const ANGLE40: Angle = 0.6981317007977317912192916082858573645353317260742187500000000000_f32;
pub const ANGLE45: Angle = 0.7853981633974482789994908671360462903976440429687500000000000000_f32;
pub const ANGLE50: Angle = 0.8726646259971647667796901259862352162599563598632812500000000000_f32;
pub const ANGLE55: Angle = 0.9599310885968812545598893848364241421222686767578125000000000000_f32;
pub const ANGLE60: Angle = 1.0471975511965976313177861811709590256214141845703125000000000000_f32;
pub const ANGLE65: Angle = 1.1344640137963142301202879025368019938468933105468750000000000000_f32;
pub const ANGLE70: Angle = 1.2217304763960306068781846988713368773460388183593750000000000000_f32;
pub const ANGLE75: Angle = 1.3089969389957472056806864202371798455715179443359375000000000000_f32;
pub const ANGLE80: Angle = 1.3962634015954635824385832165717147290706634521484375000000000000_f32;
pub const ANGLE85: Angle = 1.4835298641951801812410849379375576972961425781250000000000000000_f32;
pub const ANGLE90: Angle = 1.5707963267948965579989817342720925807952880859375000000000000000_f32;
pub const ANGLE180: Angle = 3.1415926535897931159979634685441851615905761718750000000000000000_f32;
pub const ANGLE270: Angle = 4.7123889803846896739969452028162777423858642578125000000000000000_f32;
pub const ANGLE360: Angle = ANGLE180 * 2_f32;

#[derive(Debug)]
pub enum ERotateDirection {
    CCW,
    CW,
}

pub fn angle_diff(cur: Angle, trg: Angle) -> (Angle, ERotateDirection) {
    let v_cur = V2::ZERO.polar_offset(1.0, cur);
    let v_trg = V2::ZERO.polar_offset(1.0, trg);

    let dot = v_cur.dot(v_trg);
    let diff = (1.0 - ((dot + 1.0) / 2.0)) * TAU;
    let cross = v_cur.cross(v_trg);

    (diff, match cross > 0.0 {
        true => ERotateDirection::CW,
        false => ERotateDirection::CCW,
    })
}

pub fn angle_lerp(src: Angle, dst: Angle, t: f32) -> Angle {
    let (diff, dir) = angle_diff(src, dst);
    let lerp_diff = lerp(0.0, diff, t);

    match dir {
        ERotateDirection::CW => src - lerp_diff,
        ERotateDirection::CCW => src + lerp_diff,
    }
}

/// Shift angle value [-pi .. pi]
/// to useful math range [0 .. tau] where easy do some math
/// like add, lerp, calculate diff, etc..
pub fn angle_shift_tau(angle: Angle) -> f32 {
    (angle + (TAU * 2.0)) % TAU
}
